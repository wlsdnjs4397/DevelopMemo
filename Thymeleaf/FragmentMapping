초기 퍼블 작업 시 header를 fragment로 만들어 replace 시키는 방식으로 설계되어 있었다.
하지만 문제는 fragent를 replace 시킬 때 recplace url을 mapping url로 작성하면 404로 찾지 못하고,
실제 html 파일 경로를 작성해야 했다. 즉, jsp처럼 컨트롤러를 거쳐서 동적인 데이터를 가지고 오지 못하고 있던 것이다.

1. 모든 페이지 접근 마다 헤더 데이터를 가지고 들어간다.
  => 1차원적인 접근이다.
2. header html 파일 안에서 직접 service의 함수를 호출하여 데이터를 읽어온다.
  => 실제 테스트를 해보고 가능은 하지만 단점이 많이 있다는것을 금방 알게되었다.
    단점 1) 가독성, 유지보수의 어려움 : 템플릿 파일이 복잡해지고, 템플릿과 자바 코드간의 의존성이 높아져 유지보수가 어려워질 수 있다.
    단점 2) 퍼블리셔와 함께 작업을 해야하기 때문에 자바 코드가 포함되면 퍼블리셔가 수정하기 어려워진다.
    단점 3) 템플릿 업데이트 시, 자바 코드를 함께 업데이터 해야 하므로 작업 복잡도 증가
    단점 4) 사용 용도에 따라 다르겠지만 자바 코드를 넣음으로써 재사용의 어려움이 있을 수도 있다.
    단점 5) 템플릿 렌더링 테스트가 어려울 수 있다.
3. 인터셉터에서 header 데이터 세팅
  팀장님께서 해당 방식으로 작업을 진행하자고 하셔서 이 방식을 선택했지만, 해당 방식도 단점은 있다.
  => 모든 요청에 헤더 데이터가 세팅되므로 유연성이 부족하다.
  => 로직이 분산되어 유지보수가 어려워질 수 있고 가독성이 떨어진다.
  => 인터셉터에서 다른 검사 로직에 영향이 가지 않도록 주의해야한다.

